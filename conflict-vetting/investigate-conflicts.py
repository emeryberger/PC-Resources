# investigate-conflicts.py: decode unexplained conflicts reported by PC
#   - used for checking for bogus conflicts / conflict engineering.
# Authors: Jay Lorch <jaylorch@gmail.com>
# Released into the public domain.

import argparse
import csv
import re
import smtplib
import sys
import os
import time
from collections import defaultdict

parser = argparse.ArgumentParser('mail-pc-re-conflicts', epilog="""
Normally, this script is used as follows:

First, a chair runs the explain-conflicts script to obtain a list of
unexplained conflicts in a file named *-unexplainedconflicts.csv.

Then, the chair manually looks over the unexplained-conflicts file to
remove any they understand and can explain.

Then, the chair runs this mail-pc-re-conflicts.py script to ask PC
members to look over the unexplained conflicts and confirm ones that
they also can't explain.  The chairs wait for a while for the PC to
respond.

Finally, the chair runs the investigate-conflicts.py script to
get a list of unexplained conflicts that PC members report, so they
can investigate.
""")
parser.add_argument("unexplained_conflicts_file", help="name of *-unexplainedconflicts.csv file generated by explain-conflicts.py script")
parser.add_argument("reported_uids_file", help="name of csv file containing reported UIDs, the first line of which should be 'email,uid'")

class Conflict:
    def __init__(self, paper_id, email, uid, conflict_type, explanations):
        self.paper_id = paper_id
        self.email = email
        self.uid = uid
        self.conflict_type = conflict_type
        self.explanations = explanations

class ConflictInvestigator:
    def __init__(self, unexplained_conflicts_file, reported_uids_file):
        self.unexplained_conflicts_file = unexplained_conflicts_file
        self.reported_uids_file = reported_uids_file

    def run(self):
        self.read_unexplained_conflicts()
        self.read_reported_uids()
        if len(self.conflicts_to_investigate) == 0:
            print("No conflicts to investigate")
        else:
            self.print_paper_ids_to_investigate()
            self.print_conflicts_to_investigate()

    def read_unexplained_conflicts(self):
        if not os.path.exists(self.unexplained_conflicts_file):
            print("Could not find file %s" % (self.unexplained_conflicts_file))
            sys.exit(-1)

        self.conflicts_by_email_and_uid = defaultdict(defaultdict)
        with open(self.unexplained_conflicts_file, 'r') as infile:
            reader = csv.DictReader(infile, delimiter=',')
            for row in reader:
                uid = row["uid"]
                email = row["email"]
                conflict = Conflict(row["paper"], email, uid, row["conflicttype"], row["explanations"])
                self.conflicts_by_email_and_uid[email][uid] = conflict

    def read_reported_uids(self):
        if not os.path.exists(self.reported_uids_file):
            print("Could not find file %s" % (self.reported_uids_file))
            sys.exit(-1)

        self.conflicts_to_investigate = []
        self.paper_ids_to_investigate = set()
        with open(self.reported_uids_file, 'r') as infile:
            reader = csv.DictReader(infile, delimiter=',')
            try:
                for row in reader:
                    email = row["email"]
                    uid = row["uid"]
                    if email not in self.conflicts_by_email_and_uid:
                        print("ERROR:  Could not find email %s in %s" % (email, self.unexplained_conflicts_file))
                        print("        It's possible the PC member entered a different email than the one we used.")
                        sys.exit(-1)
                    if uid not in self.conflicts_by_email_and_uid[email]:
                        print("ERROR:  Could not find UID %s for %s in %s" % (uid, email, self.unexplained_conflicts_file))
                        print("        It's possible the PC member mistyped the UID slightly.")
                        sys.exit(-1)
                    conflict = self.conflicts_by_email_and_uid[email][uid]
                    self.conflicts_to_investigate.append(conflict)
                    self.paper_ids_to_investigate.add(conflict.paper_id)
            except:
                print("Error reading %s. Please make sure the first row consists of the 9 characters 'e', 'm', 'a', 'i', 'l', ',', 'u', 'i', 'd'" % (self.reported_uids_file))
                sys.exit(-1)


    def print_paper_ids_to_investigate(self):
        paper_ids = list(self.paper_ids_to_investigate)
        paper_ids.sort(key=lambda s : int(s))
        print("Paper IDs: %s" % (",".join(paper_ids)))

    def print_conflicts_to_investigate(self):
        self.conflicts_to_investigate.sort(key=lambda conflict : int(conflict.paper_id))
        print("\nDetails:\n")
        field_names = ["paper", "email", "uid", "conflicttype", "explanations"]
        writer = csv.DictWriter(sys.stdout, delimiter=',', fieldnames=field_names)
        writer.writeheader()
        for conflict in self.conflicts_to_investigate:
            writer.writerow({"paper" : conflict.paper_id, "email" : conflict.email, "uid" : conflict.uid,
                             "conflicttype" : conflict.conflict_type, "explanations" : conflict.explanations})

args = parser.parse_args()
differ = ConflictInvestigator(args.unexplained_conflicts_file, args.reported_uids_file)
differ.run()
